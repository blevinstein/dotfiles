#!/usr/bin/env bash
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# CONFIG

# check the window size after each command
shopt -s checkwinsize
# the pattern "**" matches files and zero or more directories
shopt -s globstar
# add detail and color to ls
alias ls="ls -AlL --color=auto"
alias grep="grep --color=auto"
# 256 colors
export TERM='xterm-256color'
# http://unix.stackexchange.com/questions/72086/ctrl-s-hang-terminal-emulator
stty -ixon
# fix 'open' command
alias open='gnome-open'
# allow escape sequences
alias echo='echo -e'
# recursive copy
alias cp='cp -r'

# TOOLS

# needed for pipenv, see https://github.com/pypa/pipenv/issues/2122
export PATH="$HOME/.local/bin:$PATH"

# Used for automatically running build commands.
# Usage: onchange <directory> <command> <args...>
function onchange {
  while inotifywait -q -r -e modify $1; do
    "${@:2}"
  done
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Kill a process, given a port it is using
# Usage: kill-port 8088/tcp
function kill-port {
  pid=`fuser $1 2>&1 | awk '{print $2}'`
  echo "kill" $pid
  kill $pid
}

# Find a free port, given a starting port
# Usage: free-port 8080
function free-port {
  port=$1
  while true; do
    check=`fuser $port/tcp 2>&1 | grep $port/tcp`
    if [ -z "$check" ]; then break; fi
    port=$(expr $port + 1)
  done
  echo $port
}

# Scan for used ports
# Usage: scan-ports 8000 8010 tcp
function scan-ports {
  if [ -n "$3" ]; then
    proto="$3"
  else
    proto="tcp"
  fi
  for port in `seq $1 $2`; do
    pid=`fuser $port/$proto 2>&1 | awk '{print $2}'`
    echo "Scanning $port/$proto..."
    if [ -n "$pid" ]; then echo "$port used by process $pid"; fi
  done
}

