#!/usr/bin/env bash
# bash config shared across platforms

# CONFIG

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000
# open multiple files in vim using vertical panes
alias vim="vim -O"
export EDITOR="vim"
# open emacs without GUI
alias emacs="emacs -nw"
# git aware prompt
export GITAWAREPROMPT=~/.bash/git-aware-prompt
source $GITAWAREPROMPT/main.sh
export PS1="\[$bldgrn\]\u@$HOSTNAME:\[$bldblu\]\w \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\] \$ "
alias git_get_branch="git rev-parse --abbrev-ref HEAD"
# ant colorized output
alias ant="ant -logger org.apache.tools.ant.listener.AnsiColorLogger"

alias mkdir="mkdir -p"

# SHORTCUTS

# ^j -> jobs
bind -x '"\C-j":jobs'
# ^r -> fg ("resume")
bind -x '"\C-r":fg'

# TOOLS

export PATH=~/tools:$PATH

# Color stuff copied from https://gist.github.com/brandonb927/3195465
black='\033[0;30m'
white='\033[0;37m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'
# Color reset
alias uncolor='tput sgr0'
# Color echo
function cecho {
  color=$2
  echo "$color$1"
  uncolor
  return
}

# Runs program in another directory.
# Usage: f <directory> <program> <args...>
# To open all edited files in a git repo:
# f [repo] [vim/intellij] `git diff --name-only`
function f {
  if [ $1 ]; then
    if [ $2 ]; then
      pushd $1 >> /dev/null
      $2 "${@:3}"
      popd >> /dev/null
    else
      echo "No program name provided."
    fi
  else
    echo "No directory provided."
  fi
}
# Usage: git_diff_edit <filename>
# Edit a file with git diffs visible.
function git_diff_edit {
  if [ $1 ]; then
    temp="/tmp/diff.$$.tmp"
    git diff -R $1 > "$temp"
    vim $1 +"vertical diffpatch $temp"
    rm $temp
  else
    echo "No filename provided."
  fi
}

# execute a command in background
function x {
  "$@" &
  disown
}

# Temporarily ignore a file
alias gitignore='git update-index --skip-worktree'
alias gitsee='git update-index --no-skip-worktree'

# Better copy
function copy {
  rsync -a -P --info=progress2 $1 $2
}

# screen commands

# List all running screen sessions
# Usage: sl
alias sl="screen -list"

# Start a new screen session
# Usage: ss <session_name>
alias ss="screen -S"

# Reattach a running screen session
# Usage: sr <session_name>
alias sr="screen -r"

# Execute a command in a running screen session
function sx {
  if [ "$#" -ge 2 ]; then
    # "stuff" is a screen command
    command="${@:2}"
    screen -r $1 -X stuff "$command\r"
  else
    echo "Too few arguments."
    echo "Usage: sx <session> <command...>"
  fi
}

# tmux commands

# List all running tmux sessions
# Usage: tl
alias tl="tmux list-sessions"

# Create a new tmux session
# NOTE: Append "-r" for readonly
# NOTE: Append "-t [target-session]" to group with target-session
function ts {
  if [ $1 ]; then
    tmux_cmd="tmux new-session -s '$1' ${@:2}"
  else
    tmux_cmd="tmux new-session ${@:1}"
  fi
  echo "$tmux_cmd"
  eval "$tmux_cmd"
}

# Reattach a running tmux session
# Usage: tt <session_name>
# NOTE: "tr" conflicts with http://ss64.com/bash/tr.html
alias tt="tmux attach -t"

# Reattach a running tmux session in readonly mode
# Usage: ttr <session_name>
alias ttr="tmux attach -r -t"

# Execute commands in a running tmux session
# Usage: tx <session_name> <command...>
function tx {
  if [ "$#" -ge 2 ]; then
    # TODO: Offer optional send-keys -R (reset terminal state)
    tmux_cmd="tmux send-keys -t '$1' '${@:2}' C-m"
    echo "$tmux_cmd"
    eval "$tmux_cmd"
  else
    echo "Too few arguments."
    echo "Usage: tx <session> <command...>"
  fi
}

# Create a new window in an existing tmux session
alias tn="tmux new-window -t"

# Kill a tmux session
# NOTE: "Ctrl-A &" to kill a single window
# NOTE: "Ctrl-A x" to kill a single pane
alias tkill="tmux kill-session -t"

# Prints a comma-delimited list
function comma() {
  local IFS=,
  echo "$*"
}

# Prints a colon-delimited list
function colon() {
  local IFS=:
  echo "$*"
}
